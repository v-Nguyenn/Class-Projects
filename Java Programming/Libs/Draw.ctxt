#BlueJ class context
comment0.target=Draw
comment0.text=\r\n\ \ <i>Draw</i>.\ This\ class\ provides\ a\ basic\ capability\ for\r\n\ \ creating\ drawings\ with\ your\ programs.\ It\ uses\ a\ simple\ graphics\ model\ that\r\n\ \ allows\ you\ to\ create\ drawings\ consisting\ of\ points,\ lines,\ and\ curves\r\n\ \ in\ a\ window\ on\ your\ computer\ and\ to\ save\ the\ drawings\ to\ a\ file.\r\n\ \ This\ is\ the\ object-oriented\ version\ of\ standard\ draw;\ it\ supports\r\n\ \ multiple\ indepedent\ drawing\ windows.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://introcs.cs.princeton.edu/31datatype">Section\ 3.1</a>\ of\r\n\ \ <i>Computer\ Science\:\ An\ Interdisciplinary\ Approach</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=Draw()
comment1.text=\r\n\ Initializes\ an\ empty\ drawing\ object.\r\n
comment10.params=title
comment10.target=void\ setTitle(java.lang.String)
comment10.text=\r\n\ Sets\ the\ title\ of\ the\ drawing\ window\ to\ the\ specified\ string.\r\n\r\n\ @param\ \ title\ the\ title\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ title}\ is\ {@code\ null}\r\n
comment11.params=
comment11.target=void\ setXscale()
comment11.text=\r\n\ Sets\ the\ x-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment12.params=
comment12.target=void\ setYscale()
comment12.text=\r\n\ Sets\ the\ y-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment13.params=min\ max
comment13.target=void\ setXscale(double,\ double)
comment13.text=\r\n\ Sets\ the\ x-scale.\r\n\r\n\ @param\ min\ the\ minimum\ value\ of\ the\ x-scale\r\n\ @param\ max\ the\ maximum\ value\ of\ the\ x-scale\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ min}\ or\ {@code\ max}\ is\ either\ NaN\ or\ infinite\r\n
comment14.params=min\ max
comment14.target=void\ setYscale(double,\ double)
comment14.text=\r\n\ Sets\ the\ y-scale.\r\n\r\n\ @param\ min\ the\ minimum\ value\ of\ the\ y-scale\r\n\ @param\ max\ the\ maximum\ value\ of\ the\ y-scale\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ (max\ \=\=\ min)}\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ min}\ or\ {@code\ max}\ is\ either\ NaN\ or\ infinite\r\n
comment15.params=x
comment15.target=double\ scaleX(double)
comment16.params=y
comment16.target=double\ scaleY(double)
comment17.params=w
comment17.target=double\ factorX(double)
comment18.params=h
comment18.target=double\ factorY(double)
comment19.params=x
comment19.target=double\ userX(double)
comment2.params=
comment2.target=void\ init()
comment20.params=y
comment20.target=double\ userY(double)
comment21.params=
comment21.target=void\ clear()
comment21.text=\r\n\ Clears\ the\ screen\ to\ the\ default\ color\ (white).\r\n
comment22.params=color
comment22.target=void\ clear(java.awt.Color)
comment22.text=\r\n\ Clears\ the\ screen\ to\ the\ given\ color.\r\n\r\n\ @param\ color\ the\ color\ to\ make\ the\ background\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment23.params=
comment23.target=double\ getPenRadius()
comment23.text=\r\n\ Gets\ the\ current\ pen\ radius.\r\n\r\n\ @return\ the\ current\ pen\ radius\r\n
comment24.params=
comment24.target=void\ setPenRadius()
comment24.text=\r\n\ Sets\ the\ pen\ size\ to\ the\ default\ (.002).\r\n
comment25.params=radius
comment25.target=void\ setPenRadius(double)
comment25.text=\r\n\ Sets\ the\ radius\ of\ the\ pen\ to\ the\ given\ size.\r\n\r\n\ @param\ \ radius\ the\ radius\ of\ the\ pen\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative,\ NaN,\ or\ infinite\r\n
comment26.params=
comment26.target=java.awt.Color\ getPenColor()
comment26.text=\r\n\ Gets\ the\ current\ pen\ color.\r\n\r\n\ @return\ the\ current\ pen\ color\r\n
comment27.params=
comment27.target=void\ setPenColor()
comment27.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ default\ color\ (black).\r\n
comment28.params=color
comment28.target=void\ setPenColor(java.awt.Color)
comment28.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ given\ color.\r\n\r\n\ @param\ color\ the\ color\ to\ make\ the\ pen\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment29.params=red\ green\ blue
comment29.target=void\ setPenColor(int,\ int,\ int)
comment29.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ given\ RGB\ color.\r\n\r\n\ @param\ \ red\ the\ amount\ of\ red\ (between\ 0\ and\ 255)\r\n\ @param\ \ green\ the\ amount\ of\ green\ (between\ 0\ and\ 255)\r\n\ @param\ \ blue\ the\ amount\ of\ blue\ (between\ 0\ and\ 255)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ red},\ {@code\ green},\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ blue}\ is\ outside\ its\ prescribed\ range\r\n
comment3.params=x\ y
comment3.target=void\ setLocationOnScreen(int,\ int)
comment3.text=\r\n\ Sets\ the\ upper-left\ hand\ corner\ of\ the\ drawing\ window\ to\ be\ (x,\ y),\ where\ (0,\ 0)\ is\ upper\ left.\r\n\r\n\ @param\ \ x\ the\ number\ of\ pixels\ from\ the\ left\r\n\ @param\ \ y\ the\ number\ of\ pixels\ from\ the\ top\r\n\ @throws\ IllegalArgumentException\ if\ the\ width\ or\ height\ is\ 0\ or\ negative\r\n
comment30.params=
comment30.target=void\ xorOn()
comment30.text=\r\n\ Turns\ on\ xor\ mode.\r\n
comment31.params=
comment31.target=void\ xorOff()
comment31.text=\r\n\ Turns\ off\ xor\ mode.\r\n
comment32.params=
comment32.target=javax.swing.JLabel\ getJLabel()
comment32.text=\r\n\ Gets\ the\ current\ {@code\ JLabel}\ for\ use\ in\ some\ other\ GUI.\r\n\r\n\ @return\ the\ current\ {@code\ JLabel}\r\n
comment33.params=
comment33.target=java.awt.Font\ getFont()
comment33.text=\r\n\ Gets\ the\ current\ font.\r\n\r\n\ @return\ the\ current\ font\r\n
comment34.params=
comment34.target=void\ setFont()
comment34.text=\r\n\ Sets\ the\ font\ to\ the\ default\ font\ (sans\ serif,\ 16\ point).\r\n
comment35.params=font
comment35.target=void\ setFont(java.awt.Font)
comment35.text=\r\n\ Sets\ the\ font\ to\ the\ given\ value.\r\n\r\n\ @param\ font\ the\ font\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ font}\ is\ {@code\ null}\r\n
comment36.params=x0\ y0\ x1\ y1
comment36.target=void\ line(double,\ double,\ double,\ double)
comment36.text=\r\n\ Draws\ a\ line\ from\ (x0,\ y0)\ to\ (x1,\ y1).\r\n\r\n\ @param\ x0\ the\ x-coordinate\ of\ the\ starting\ point\r\n\ @param\ y0\ the\ y-coordinate\ of\ the\ starting\ point\r\n\ @param\ x1\ the\ x-coordinate\ of\ the\ destination\ point\r\n\ @param\ y1\ the\ y-coordinate\ of\ the\ destination\ point\r\n\ @throws\ IllegalArgumentException\ if\ any\ coordinate\ is\ either\ NaN\ or\ infinite\r\n
comment37.params=x\ y
comment37.target=void\ pixel(double,\ double)
comment37.text=\r\n\ Draws\ one\ pixel\ at\ (x,\ y).\r\n\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment38.params=x\ y
comment38.target=void\ point(double,\ double)
comment38.text=\r\n\ Draws\ a\ point\ at\ (x,\ y).\r\n\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ point\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ point\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment39.params=x\ y\ radius
comment39.target=void\ circle(double,\ double,\ double)
comment39.text=\r\n\ Draws\ a\ circle\ of\ the\ specified\ radius,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment4.params=value
comment4.target=void\ setDefaultCloseOperation(int)
comment4.text=\r\n\ Sets\ the\ default\ close\ operation.\r\n\r\n\ @param\ \ value\ the\ value,\ typically\ {@code\ JFrame.EXIT_ON_CLOSE}\r\n\ \ \ \ \ \ \ \ \ (close\ all\ windows)\ or\ {@code\ JFrame.DISPOSE_ON_CLOSE}\r\n\ \ \ \ \ \ \ \ \ (close\ current\ window)\r\n
comment40.params=x\ y\ radius
comment40.target=void\ filledCircle(double,\ double,\ double)
comment40.text=\r\n\ Draws\ a\ filled\ circle\ of\ the\ specified\ radius,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment41.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment41.target=void\ ellipse(double,\ double,\ double,\ double)
comment41.text=\r\n\ Draws\ an\ ellipse\ with\ the\ specified\ semimajor\ and\ semiminor\ axes,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ \ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ semiMajorAxis}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ semiMinorAxis}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment42.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment42.target=void\ filledEllipse(double,\ double,\ double,\ double)
comment42.text=\r\n\ Draws\ a\ filled\ ellipse\ with\ the\ specified\ semimajor\ and\ semiminor\ axes,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ \ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ \ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ semiMajorAxis}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ semiMinorAxis}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment43.params=x\ y\ radius\ angle1\ angle2
comment43.target=void\ arc(double,\ double,\ double,\ double,\ double)
comment43.text=\r\n\ Draws\ a\ circular\ arc\ of\ the\ specified\ radius,\r\n\ centered\ at\ (<em>x</em>,\ <em>y</em>),\ from\ angle1\ to\ angle2\ (in\ degrees).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ \ radius\ the\ radius\ of\ the\ circle\r\n\ @param\ \ angle1\ the\ starting\ angle.\ 0\ would\ mean\ an\ arc\ beginning\ at\ 3\ o'clock.\r\n\ @param\ \ angle2\ the\ angle\ at\ the\ end\ of\ the\ arc.\ For\ example,\ if\r\n\ \ \ \ \ \ \ \ \ you\ want\ a\ 90\ degree\ arc,\ then\ angle2\ should\ be\ angle1\ +\ 90.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ radius}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment44.params=x\ y\ halfLength
comment44.target=void\ square(double,\ double,\ double)
comment44.text=\r\n\ Draws\ a\ square\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ halfLength\ one\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ halfLength}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment45.params=x\ y\ halfLength
comment45.target=void\ filledSquare(double,\ double,\ double)
comment45.text=\r\n\ Draws\ a\ square\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ \ halfLength\ one\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ halfLength}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment46.params=x\ y\ halfWidth\ halfHeight
comment46.target=void\ rectangle(double,\ double,\ double,\ double)
comment46.text=\r\n\ Draws\ a\ rectangle\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ halfWidth\ one\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ \ halfHeight\ one\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ halfWidth}\ or\ {@code\ halfHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment47.params=x\ y\ halfWidth\ halfHeight
comment47.target=void\ filledRectangle(double,\ double,\ double,\ double)
comment47.text=\r\n\ Draws\ a\ filled\ rectangle\ of\ the\ specified\ size,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ \ halfWidth\ one\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ \ halfHeight\ one\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ halfWidth}\ or\ {@code\ halfHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ any\ argument\ is\ either\ NaN\ or\ infinite\r\n
comment48.params=x\ y
comment48.target=void\ polygon(double[],\ double[])
comment48.text=\r\n\ Draws\ a\ polygon\ with\ the\ vertices\r\n\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>),\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>),\ ...,\r\n\ (<em>x</em><sub><em>n</em>\u20131</sub>,\ <em>y</em><sub><em>n</em>\u20131</sub>).\r\n\r\n\ @param\ \ x\ an\ array\ of\ all\ the\ <em>x</em>-coordinates\ of\ the\ polygon\r\n\ @param\ \ y\ an\ array\ of\ all\ the\ <em>y</em>-coordinates\ of\ the\ polygon\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x[]}\ and\ {@code\ y[]}\r\n\ \ \ \ \ \ \ \ \ are\ of\ the\ same\ length\r\n\ @throws\ IllegalArgumentException\ if\ any\ coordinate\ is\ either\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x[]}\ or\ {@code\ y[]}\ is\ {@code\ null}\r\n
comment49.params=x\ y
comment49.target=void\ filledPolygon(double[],\ double[])
comment49.text=\r\n\ Draws\ a\ filled\ polygon\ with\ the\ vertices\r\n\ (<em>x</em><sub>0</sub>,\ <em>y</em><sub>0</sub>),\r\n\ (<em>x</em><sub>1</sub>,\ <em>y</em><sub>1</sub>),\ ...,\r\n\ (<em>x</em><sub><em>n</em>\u20131</sub>,\ <em>y</em><sub><em>n</em>\u20131</sub>).\r\n\r\n\ @param\ \ x\ an\ array\ of\ all\ the\ <em>x</em>-coordinates\ of\ the\ polygon\r\n\ @param\ \ y\ an\ array\ of\ all\ the\ <em>y</em>-coordinates\ of\ the\ polygon\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x[]}\ and\ {@code\ y[]}\r\n\ \ \ \ \ \ \ \ \ are\ of\ the\ same\ length\r\n\ @throws\ IllegalArgumentException\ if\ any\ coordinate\ is\ either\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x[]}\ or\ {@code\ y[]}\ is\ {@code\ null}\r\n
comment5.params=canvasWidth\ canvasHeight
comment5.target=void\ setCanvasSize(int,\ int)
comment5.text=\r\n\ Sets\ the\ canvas\ (drawing\ area)\ to\ be\ <em>width</em>-by-<em>height</em>\ pixels.\r\n\ This\ also\ erases\ the\ current\ drawing\ and\ resets\ the\ coordinate\ system,\ pen\ radius,\r\n\ pen\ color,\ and\ font\ back\ to\ their\ default\ values.\r\n\ Ordinarly,\ this\ method\ is\ called\ once,\ at\ the\ very\ beginning\ of\ a\ program.\r\n\r\n\ @param\ \ canvasWidth\ the\ width\ as\ a\ number\ of\ pixels\r\n\ @param\ \ canvasHeight\ the\ height\ as\ a\ number\ of\ pixels\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ canvasWidth}\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ canvasHeight}\ are\ positive\r\n
comment50.params=filename
comment50.target=java.awt.Image\ getImage(java.lang.String)
comment50.text=\r\n\ \ Drawing\ images.\r\n
comment51.params=x\ y\ filename
comment51.target=void\ picture(double,\ double,\ java.lang.String)
comment51.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ The\ supported\ image\ formats\ are\ typically\ JPEG,\ PNG,\ GIF,\ TIFF,\ and\ BMP.\r\n\ As\ an\ optimization,\ the\ picture\ is\ cached,\ so\ there\ is\ no\ performance\r\n\ penalty\ for\ redrawing\ the\ same\ image\ multiple\ times\ (e.g.,\ in\ an\ animation).\r\n\ However,\ if\ you\ change\ the\ picture\ file\ after\ drawing\ it,\ subsequent\r\n\ calls\ will\ draw\ the\ original\ picture.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment52.params=x\ y\ filename\ degrees
comment52.target=void\ picture(double,\ double,\ java.lang.String,\ double)
comment52.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\r\n\ rotated\ given\ number\ of\ degrees.\r\n\ The\ supported\ image\ formats\ are\ typically\ JPEG,\ PNG,\ GIF,\ TIFF,\ and\ BMP.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x},\ {@code\ y},\ {@code\ degrees}\ is\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment53.params=x\ y\ filename\ scaledWidth\ scaledHeight
comment53.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double)
comment53.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\r\n\ rescaled\ to\ the\ specified\ bounding\ box.\r\n\ The\ supported\ image\ formats\ are\ typically\ JPEG,\ PNG,\ GIF,\ TIFF,\ and\ BMP.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ scaledWidth\ the\ width\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ scaledHeight\ the\ height\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ scaledWidth}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ scaledHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment54.params=x\ y\ filename\ scaledWidth\ scaledHeight\ degrees
comment54.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double,\ double)
comment54.text=\r\n\ Draws\ the\ specified\ image\ centered\ at\ (<em>x</em>,\ <em>y</em>),\ rotated\r\n\ given\ number\ of\ degrees,\ and\ rescaled\ to\ the\ specified\ bounding\ box.\r\n\ The\ supported\ image\ formats\ are\ typically\ JPEG,\ PNG,\ GIF,\ TIFF,\ and\ BMP.\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ image\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ image\r\n\ @param\ \ filename\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ \ scaledWidth\ the\ width\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ scaledHeight\ the\ height\ of\ the\ scaled\ image\ (in\ screen\ coordinates)\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ scaledWidth}\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ scaledHeight}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ image\ filename\ is\ invalid\r\n
comment55.params=x\ y\ text
comment55.target=void\ text(double,\ double,\ java.lang.String)
comment55.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment56.params=x\ y\ text\ degrees
comment56.target=void\ text(double,\ double,\ java.lang.String,\ double)
comment56.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ at\ (<em>x</em>,\ <em>y</em>)\ and\r\n\ rotated\ by\ the\ specified\ number\ of\ degrees.\r\n\ @param\ \ x\ the\ center\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ center\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @param\ \ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x},\ {@code\ y},\ or\ {@code\ degrees}\ is\ either\ NaN\ or\ infinite\r\n
comment57.params=x\ y\ text
comment57.target=void\ textLeft(double,\ double,\ java.lang.String)
comment57.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ left-aligned\ at\ (<em>x</em>,\ <em>y</em>).\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment58.params=x\ y\ text
comment58.target=void\ textRight(double,\ double,\ java.lang.String)
comment58.text=\r\n\ Writes\ the\ given\ text\ string\ in\ the\ current\ font,\ right-aligned\ at\ (<em>x</em>,\ <em>y</em>).\r\n\r\n\ @param\ \ x\ the\ <em>x</em>-coordinate\ of\ the\ text\r\n\ @param\ \ y\ the\ <em>y</em>-coordinate\ of\ the\ text\r\n\ @param\ \ text\ the\ text\ to\ write\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ text}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ or\ {@code\ y}\ is\ either\ NaN\ or\ infinite\r\n
comment59.params=t
comment59.target=void\ show(int)
comment59.text=\r\n\ Copies\ the\ offscreen\ buffer\ to\ the\ onscreen\ buffer,\ pauses\ for\ t\ milliseconds\r\n\ and\ enables\ double\ buffering.\r\n\ @param\ t\ number\ of\ milliseconds\r\n\ @deprecated\ replaced\ by\ {@link\ \#enableDoubleBuffering()},\ {@link\ \#show()},\ and\ {@link\ \#pause(int\ t)}\r\n
comment6.params=
comment6.target=javax.swing.JMenuBar\ createMenuBar()
comment60.params=t
comment60.target=void\ pause(int)
comment60.text=\r\n\ Pause\ for\ t\ milliseconds.\ This\ method\ is\ intended\ to\ support\ computer\ animations.\r\n\ @param\ t\ number\ of\ milliseconds\r\n
comment61.params=
comment61.target=void\ show()
comment61.text=\r\n\ Copies\ offscreen\ buffer\ to\ onscreen\ buffer.\ There\ is\ no\ reason\ to\ call\r\n\ this\ method\ unless\ double\ buffering\ is\ enabled.\r\n
comment62.params=
comment62.target=void\ draw()
comment63.params=
comment63.target=void\ enableDoubleBuffering()
comment63.text=\r\n\ Enable\ double\ buffering.\ All\ subsequent\ calls\ to\r\n\ drawing\ methods\ such\ as\ {@code\ line()},\ {@code\ circle()},\r\n\ and\ {@code\ square()}\ will\ be\ deferred\ until\ the\ next\ call\r\n\ to\ show().\ Useful\ for\ animations.\r\n
comment64.params=
comment64.target=void\ disableDoubleBuffering()
comment64.text=\r\n\ Disable\ double\ buffering.\ All\ subsequent\ calls\ to\r\n\ drawing\ methods\ such\ as\ {@code\ line()},\ {@code\ circle()},\r\n\ and\ {@code\ square()}\ will\ be\ displayed\ on\ screen\ when\ called.\r\n\ This\ is\ the\ default.\r\n
comment65.params=filename
comment65.target=void\ save(java.lang.String)
comment65.text=\r\n\ Saves\ the\ drawing\ to\ using\ the\ specified\ filename.\r\n\ The\ supported\ image\ formats\ are\ typically\ JPEG,\ PNG,\ GIF,\ TIFF,\ and\ BMP.\r\n\r\n\ @param\ \ filename\ the\ name\ of\ the\ file\ with\ one\ of\ the\ required\ suffixes\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment66.params=e
comment66.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment66.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment67.params=listener
comment67.target=void\ addListener(DrawListener)
comment67.text=\r\n\ Adds\ a\ {@link\ DrawListener}\ to\ listen\ to\ keyboard\ and\ mouse\ events.\r\n\r\n\ @param\ listener\ the\ {\\tt\ DrawListener}\ argument\r\n
comment68.params=
comment68.target=boolean\ isMousePressed()
comment68.text=\r\n\ Returns\ true\ if\ the\ mouse\ is\ being\ pressed.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ mouse\ is\ being\ pressed;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment69.params=
comment69.target=boolean\ mousePressed()
comment69.text=\r\n\ Returns\ true\ if\ the\ mouse\ is\ being\ pressed.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ mouse\ is\ being\ pressed;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @deprecated\ replaced\ by\ {@link\ \#isMousePressed()}\r\n
comment7.params=x\ name
comment7.target=void\ validate(double,\ java.lang.String)
comment7.text=\r\n\ \ Input\ validation\ helper\ methods.\r\n
comment70.params=
comment70.target=double\ mouseX()
comment70.text=\r\n\ Returns\ the\ x-coordinate\ of\ the\ mouse.\r\n\ @return\ the\ x-coordinate\ of\ the\ mouse\r\n
comment71.params=
comment71.target=double\ mouseY()
comment71.text=\r\n\ Returns\ the\ y-coordinate\ of\ the\ mouse.\r\n\r\n\ @return\ the\ y-coordinate\ of\ the\ mouse\r\n
comment72.params=e
comment72.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment72.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment73.params=e
comment73.target=void\ mouseExited(java.awt.event.MouseEvent)
comment73.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment74.params=e
comment74.target=void\ mousePressed(java.awt.event.MouseEvent)
comment74.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment75.params=e
comment75.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment75.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment76.params=e
comment76.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment76.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment77.params=e
comment77.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment77.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment78.params=e
comment78.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment78.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment79.params=
comment79.target=boolean\ hasNextKeyTyped()
comment79.text=\r\n\ Returns\ true\ if\ the\ user\ has\ typed\ a\ key.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ user\ has\ typed\ a\ key;\ {@code\ false}\ otherwise\r\n
comment8.params=x\ name
comment8.target=void\ validateNonnegative(double,\ java.lang.String)
comment80.params=
comment80.target=char\ nextKeyTyped()
comment80.text=\r\n\ The\ next\ key\ typed\ by\ the\ user.\r\n\r\n\ @return\ the\ next\ key\ typed\ by\ the\ user\r\n
comment81.params=keycode
comment81.target=boolean\ isKeyPressed(int)
comment81.text=\r\n\ Returns\ true\ if\ the\ keycode\ is\ being\ pressed.\r\n\ <p>\r\n\ This\ method\ takes\ as\ an\ argument\ the\ keycode\ (corresponding\ to\ a\ physical\ key).\r\n\ It\ can\ handle\ action\ keys\ (such\ as\ F1\ and\ arrow\ keys)\ and\ modifier\ keys\r\n\ (such\ as\ shift\ and\ control).\r\n\ See\ {@link\ KeyEvent}\ for\ a\ description\ of\ key\ codes.\r\n\r\n\ @param\ \ keycode\ the\ keycode\ to\ check\r\n\ @return\ {@code\ true}\ if\ {@code\ keycode}\ is\ currently\ being\ pressed;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment82.params=e
comment82.target=void\ keyTyped(java.awt.event.KeyEvent)
comment82.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment83.params=e
comment83.target=void\ keyPressed(java.awt.event.KeyEvent)
comment83.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment84.params=e
comment84.target=void\ keyReleased(java.awt.event.KeyEvent)
comment84.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment85.params=args
comment85.target=void\ main(java.lang.String[])
comment85.text=\r\n\ Test\ client.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment9.params=x\ name
comment9.target=void\ validateNotNull(java.lang.Object,\ java.lang.String)
numComments=86
